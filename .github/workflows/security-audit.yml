name: Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly security audit on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

# Restrict permissions for security
permissions:
  contents: read
  security-events: write
  pull-requests: write
  issues: read
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run npm dependency audit
        run: |
          echo "Running pnpm audit..."
          pnpm audit --audit-level=moderate --json > npm-audit-results.json || true

          # Check for critical and high vulnerabilities
          CRITICAL_COUNT=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"

          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "❌ Critical or high vulnerabilities found!"
            pnpm audit --audit-level=moderate
            exit 1
          else
            echo "✅ No critical or high vulnerabilities found"
          fi

      - name: Upload npm audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit-results.json

  rust-security-scan:
    name: Rust Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run Rust dependency audit
        run: |
          echo "Running cargo audit on crypto-core..."
          cd libs/crypto-core
          cargo audit --json > ../../rust-audit-results.json || true

          # Check for vulnerabilities
          if [ -s ../../rust-audit-results.json ]; then
            # Handle both array and boolean responses from cargo audit
            VULN_COUNT=$(cat ../../rust-audit-results.json | jq -r 'if .vulnerabilities.found then (.vulnerabilities.found | if type == "array" then length else 0 end) else 0 end')
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ Rust vulnerabilities found!"
              cargo audit
              exit 1
            else
              echo "✅ No Rust vulnerabilities found"
            fi
          fi

      - name: Run Rust security lints
        run: |
          cd libs/crypto-core
          cargo clippy -- -D warnings -D clippy::all -D clippy::pedantic -A clippy::missing_errors_doc -A clippy::missing_panics_doc

      - name: Upload Rust audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-audit-results
          path: rust-audit-results.json

  secret-scan:
    name: Secret Detection & Prevention
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install TruffleHog for secret scanning
        run: |
          echo "Installing TruffleHog for comprehensive secret scanning..."
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          trufflehog --version

      - name: Scan for secrets with TruffleHog
        run: |
          echo "Scanning for secrets with TruffleHog..."
          trufflehog git file://. --since-commit HEAD~1 --only-verified --fail || {
            echo "❌ Verified secrets found!"
            exit 1
          }
          echo "✅ No verified secrets found"

      - name: Run GitLeaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Check for hardcoded credentials patterns
        run: |
          echo "Scanning for additional credential patterns..."
          # Check for common hardcoded secrets patterns
          PATTERNS_FOUND=0

          # API keys patterns
          if grep -r -E "(api[_-]?key|apikey)\s*[=:]\s*['\"][a-zA-Z0-9]{20,}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️ Potential API keys found"
            PATTERNS_FOUND=1
          fi

          # Database connection strings
          if grep -r -E "(mongodb://|mysql://|postgresql://|sqlite://)" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️ Potential database connection strings found"
            PATTERNS_FOUND=1
          fi

          # Private keys
          if grep -r -E "-----BEGIN (RSA |EC |OPENSSH |DSA )?PRIVATE KEY-----" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Private keys found!"
            exit 1
          fi

          # JWT tokens
          if grep -r -E "ey[A-Za-z0-9_-]*\.ey[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️ Potential JWT tokens found"
            PATTERNS_FOUND=1
          fi

          if [ $PATTERNS_FOUND -eq 1 ]; then
            echo "⚠️ Potential secrets detected - please review manually"
            echo "Consider using environment variables or secure vaults for sensitive data"
          else
            echo "✅ No obvious secret patterns found"
          fi

  crypto-core-security:
    name: Crypto Core Security Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Install wasm-opt
        run: |
          # Get the latest version dynamically
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/WebAssembly/binaryen/releases/latest | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Binaryen $LATEST_RELEASE"

          wget https://github.com/WebAssembly/binaryen/releases/download/$LATEST_RELEASE/binaryen-$LATEST_RELEASE-x86_64-linux.tar.gz
          tar -xzf binaryen-$LATEST_RELEASE-x86_64-linux.tar.gz
          sudo cp binaryen-$LATEST_RELEASE/bin/wasm-opt /usr/local/bin/

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js for WASM validation
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build and validate WASM
        run: |
          cd libs/crypto-core

          # Build WASM with security optimizations
          echo "Building WASM with security optimizations..."
          wasm-pack build --target web --out-dir pkg --release

          # Validate WASM binary security
          echo "Validating WASM binary security..."
          wasm-opt pkg/crypto_core_bg.wasm --print-stack-ir > /dev/null || {
            echo "❌ WASM binary validation failed!"
            exit 1
          }

          # Check for dangerous WASM imports/exports
          echo "Checking for dangerous WASM imports/exports..."
          wasm-objdump -x pkg/crypto_core_bg.wasm | grep -E "(import|export)" > wasm-analysis.txt

          # Validate no dangerous syscalls are exposed
          if grep -E "(fs\.|process\.|eval|Function)" wasm-analysis.txt; then
            echo "❌ Dangerous WASM imports/exports detected!"
            cat wasm-analysis.txt
            exit 1
          else
            echo "✅ WASM binary security validation passed"
          fi

      - name: Run crypto-core security tests
        run: |
          cd libs/crypto-core
          pnpm test -- --run security

      - name: Upload WASM analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wasm-security-analysis
          path: libs/crypto-core/wasm-analysis.txt

  # Build artifact integrity verification
  build-integrity-check:
    name: Build Artifact Integrity
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: pnpm install

      - name: Generate build integrity checksums
        run: |
          echo "Generating build integrity checksums..."

          # Build all packages
          pnpm build

          # Generate checksums for all built artifacts
          mkdir -p build-checksums

          # Find and checksum all built files
          find dist -type f 2>/dev/null | sort | while read -r file; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> build-checksums/dist-checksums.txt
            fi
          done || echo "No dist directory found"

          # Checksum WASM artifacts
          find libs/crypto-core/pkg -name "*.wasm" -o -name "*.js" -o -name "*.ts" 2>/dev/null | sort | while read -r file; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> build-checksums/wasm-checksums.txt
            fi
          done || echo "No WASM artifacts found"

          # Verify reproducible build (simple check)
          if [ -f "libs/crypto-core/pkg/crypto_core_bg.wasm" ]; then
            WASM_HASH=$(sha256sum libs/crypto-core/pkg/crypto_core_bg.wasm | cut -d' ' -f1)
            echo "WASM hash: $WASM_HASH"
            echo "$WASM_HASH" > build-checksums/crypto-core-wasm.hash
          fi

          echo "✅ Build integrity checksums generated"

      - name: Upload build checksums
        uses: actions/upload-artifact@v4
        with:
          name: build-integrity-checksums
          path: build-checksums/
          retention-days: 30

  security-summary:
    name: Security Summary
    needs:
      [
        dependency-scan,
        rust-security-scan,
        secret-scan,
        crypto-core-security,
        build-integrity-check,
      ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for audit logging
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Initialize audit logging
        run: |
          echo "Initializing security audit trail logging..."
          mkdir -p logs
          node tools/security/audit-logger.js log info SECURITY_AUDIT STARTED '{
            "workflow": "security-audit.yml",
            "run_id": "${{ github.run_id }}",
            "run_attempt": "${{ github.run_attempt }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "trigger": "${{ github.event_name }}"
          }'

      - name: Log individual job results
        run: |
          echo "Logging individual security job results..."

          # Log dependency scan result
          node tools/security/audit-logger.js log info DEPENDENCY_SCAN COMPLETED '{
            "result": "${{ needs.dependency-scan.result }}",
            "job_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

          # Log Rust security scan result
          node tools/security/audit-logger.js log info RUST_SECURITY_SCAN COMPLETED '{
            "result": "${{ needs.rust-security-scan.result }}",
            "job_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

          # Log secret scan result
          node tools/security/audit-logger.js log info SECRET_SCAN COMPLETED '{
            "result": "${{ needs.secret-scan.result }}",
            "job_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

          # Log crypto core security result
          node tools/security/audit-logger.js log info CRYPTO_SECURITY_SCAN COMPLETED '{
            "result": "${{ needs.crypto-core-security.result }}",
            "job_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

          # Log build integrity check result
          node tools/security/audit-logger.js log info BUILD_INTEGRITY_CHECK COMPLETED '{
            "result": "${{ needs.build-integrity-check.result }}",
            "job_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

      - name: Generate security report with monitoring data
        run: |
          echo "# Security Audit Summary" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "Audit Run ID: ${{ github.run_id }}" >> security-report.md
          echo "Git Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md

          echo "## Job Results" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Rust Security Scan: ${{ needs.rust-security-scan.result }}" >> security-report.md
          echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Crypto Core Security: ${{ needs.crypto-core-security.result }}" >> security-report.md
          echo "- Build Integrity Check: ${{ needs.build-integrity-check.result }}" >> security-report.md
          echo "" >> security-report.md

          # Overall status
          if [[ "${{ needs.dependency-scan.result }}" == "success" ]] && \
             [[ "${{ needs.rust-security-scan.result }}" == "success" ]] && \
             [[ "${{ needs.secret-scan.result }}" == "success" ]] && \
             [[ "${{ needs.crypto-core-security.result }}" == "success" ]] && \
             [[ "${{ needs.build-integrity-check.result }}" == "success" ]]; then
            echo "## ✅ Overall Status: PASSED" >> security-report.md
            echo "All security checks completed successfully." >> security-report.md
            OVERALL_STATUS="PASSED"
          else
            echo "## ❌ Overall Status: FAILED" >> security-report.md
            echo "One or more security checks failed. Review the job details above." >> security-report.md
            OVERALL_STATUS="FAILED"
          fi

          # Generate monitoring data
          cat > security-audit-results.json << EOF
          {
            "scanType": "security-audit",
            "timestamp": "$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")",
            "gitCommit": "${{ github.sha }}",
            "workflowRunId": "${{ github.run_id }}",
            "results": {
              "dependencyScan": "${{ needs.dependency-scan.result }}",
              "rustSecurityScan": "${{ needs.rust-security-scan.result }}",
              "secretDetection": "${{ needs.secret-scan.result }}",
              "cryptoCoreSeurity": "${{ needs.crypto-core-security.result }}",
              "buildIntegrityCheck": "${{ needs.build-integrity-check.result }}"
            },
            "overallStatus": "\$OVERALL_STATUS",
            "success": $(if [[ "\$OVERALL_STATUS" == "PASSED" ]]; then echo "true"; else echo "false"; fi),
            "environment": "${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}",
            "vulnerabilities": [],
            "issues": []
          }
          EOF

          # Log overall audit result
          node tools/security/audit-logger.js log info SECURITY_AUDIT COMPLETED "{
            \"overall_status\": \"$OVERALL_STATUS\",
            \"dependency_scan\": \"${{ needs.dependency-scan.result }}\",
            \"rust_security_scan\": \"${{ needs.rust-security-scan.result }}\",
            \"secret_scan\": \"${{ needs.secret-scan.result }}\",
            \"crypto_security\": \"${{ needs.crypto-core-security.result }}\",
            \"build_integrity\": \"${{ needs.build-integrity-check.result }}\",
            \"workflow_duration_minutes\": $((SECONDS/60))
          }"

      - name: Run security monitoring
        continue-on-error: true
        env:
          SLACK_SECURITY_WEBHOOK: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          EMAIL_ALERT_ENDPOINT: ${{ secrets.EMAIL_ALERT_ENDPOINT }}
          ENABLE_SLACK_ALERTS: ${{ vars.ENABLE_SLACK_ALERTS || 'true' }}
          ENABLE_EMAIL_ALERTS: ${{ vars.ENABLE_EMAIL_ALERTS || 'false' }}
          SECURITY_TEAM_EMAIL: ${{ secrets.SECURITY_TEAM_EMAIL }}
          NODE_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          echo "Running security monitoring and alerting..."
          node tools/security/security-monitor.js security-audit security-audit-results.json

      - name: Verify audit log integrity
        run: |
          echo "Verifying audit log integrity..."
          if node tools/security/audit-logger.js verify; then
            echo "✅ Audit log integrity verification passed"
          else
            echo "❌ Audit log integrity verification failed"
            exit 1
          fi

      - name: Generate audit trail summary
        run: |
          echo "Generating audit trail summary for last 24 hours..."
          node tools/security/audit-logger.js summary 24 > audit-summary.json

          echo "" >> security-report.md
          echo "## Audit Trail Summary (24h)" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          cat audit-summary.json >> security-report.md
          echo "\`\`\`" >> security-report.md

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-complete-${{ github.sha }}
          path: |
            security-report.md
            security-audit-results.json
            audit-summary.json
            logs/
          retention-days: 90

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-report.md

      - name: Comment PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Audit Results\n\n${report}`
            });

      - name: Log audit completion
        if: always()
        run: |
          # Final audit completion log
          FINAL_STATUS="${{ job.status }}"
          node tools/security/audit-logger.js log info SECURITY_AUDIT WORKFLOW_COMPLETED "{
            \"final_status\": \"$FINAL_STATUS\",
            \"run_id\": \"${{ github.run_id }}\",
            \"conclusion\": \"Security audit workflow completed\",
            \"artifacts_uploaded\": true
          }"
