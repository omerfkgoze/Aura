name: Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly security audit on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run npm dependency audit
        run: |
          echo "Running pnpm audit..."
          pnpm audit --audit-level=moderate --json > npm-audit-results.json || true

          # Check for critical and high vulnerabilities
          CRITICAL_COUNT=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(cat npm-audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')

          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"

          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "❌ Critical or high vulnerabilities found!"
            pnpm audit --audit-level=moderate
            exit 1
          else
            echo "✅ No critical or high vulnerabilities found"
          fi

      - name: Upload npm audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit-results.json

  rust-security-scan:
    name: Rust Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run Rust dependency audit
        run: |
          echo "Running cargo audit on crypto-core..."
          cd libs/crypto-core
          cargo audit --json > ../../rust-audit-results.json || true

          # Check for vulnerabilities
          if [ -s ../../rust-audit-results.json ]; then
            # Handle both array and boolean responses from cargo audit
            VULN_COUNT=$(cat ../../rust-audit-results.json | jq -r 'if .vulnerabilities.found then (.vulnerabilities.found | if type == "array" then length else 0 end) else 0 end')
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "❌ Rust vulnerabilities found!"
              cargo audit
              exit 1
            else
              echo "✅ No Rust vulnerabilities found"
            fi
          fi

      - name: Run Rust security lints
        run: |
          cd libs/crypto-core
          cargo clippy -- -D warnings -D clippy::all -D clippy::pedantic -A clippy::missing_errors_doc -A clippy::missing_panics_doc

      - name: Upload Rust audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rust-audit-results
          path: rust-audit-results.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  crypto-core-security:
    name: Crypto Core Security Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Install wasm-opt
        run: |
          # Get the latest version dynamically
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/WebAssembly/binaryen/releases/latest | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Installing Binaryen $LATEST_RELEASE"

          wget https://github.com/WebAssembly/binaryen/releases/download/$LATEST_RELEASE/binaryen-$LATEST_RELEASE-x86_64-linux.tar.gz
          tar -xzf binaryen-$LATEST_RELEASE-x86_64-linux.tar.gz
          sudo cp binaryen-$LATEST_RELEASE/bin/wasm-opt /usr/local/bin/

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js for WASM validation
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build and validate WASM
        run: |
          cd libs/crypto-core

          # Build WASM with security optimizations
          echo "Building WASM with security optimizations..."
          wasm-pack build --target web --out-dir pkg --release

          # Validate WASM binary security
          echo "Validating WASM binary security..."
          wasm-opt pkg/crypto_core_bg.wasm --print-stack-ir > /dev/null || {
            echo "❌ WASM binary validation failed!"
            exit 1
          }

          # Check for dangerous WASM imports/exports
          echo "Checking for dangerous WASM imports/exports..."
          wasm-objdump -x pkg/crypto_core_bg.wasm | grep -E "(import|export)" > wasm-analysis.txt

          # Validate no dangerous syscalls are exposed
          if grep -E "(fs\.|process\.|eval|Function)" wasm-analysis.txt; then
            echo "❌ Dangerous WASM imports/exports detected!"
            cat wasm-analysis.txt
            exit 1
          else
            echo "✅ WASM binary security validation passed"
          fi

      - name: Run crypto-core security tests
        run: |
          cd libs/crypto-core
          pnpm test -- --run security

      - name: Upload WASM analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wasm-security-analysis
          path: libs/crypto-core/wasm-analysis.txt

  security-summary:
    name: Security Summary
    needs: [dependency-scan, rust-security-scan, secret-scan, crypto-core-security]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# Security Audit Summary" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md

          echo "## Job Results" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Rust Security Scan: ${{ needs.rust-security-scan.result }}" >> security-report.md
          echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Crypto Core Security: ${{ needs.crypto-core-security.result }}" >> security-report.md
          echo "" >> security-report.md

          # Overall status
          if [[ "${{ needs.dependency-scan.result }}" == "success" ]] && \
             [[ "${{ needs.rust-security-scan.result }}" == "success" ]] && \
             [[ "${{ needs.secret-scan.result }}" == "success" ]] && \
             [[ "${{ needs.crypto-core-security.result }}" == "success" ]]; then
            echo "## ✅ Overall Status: PASSED" >> security-report.md
            echo "All security checks completed successfully." >> security-report.md
          else
            echo "## ❌ Overall Status: FAILED" >> security-report.md
            echo "One or more security checks failed. Review the job details above." >> security-report.md
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-report.md

      - name: Comment PR with security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Audit Results\n\n${report}`
            });
