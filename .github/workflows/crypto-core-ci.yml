name: Crypto Core CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'libs/crypto-core/**'
      - '.github/workflows/crypto-core-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'libs/crypto-core/**'
      - '.github/workflows/crypto-core-ci.yml'
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  WASM_PACK_CACHE: ~/.cache/wasm-pack

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo audit
        run: cargo install --force cargo-audit

      - name: Run cargo audit
        run: |
          cd libs/crypto-core
          cargo audit --deny warnings

      - name: Run clippy security lints
        run: |
          cd libs/crypto-core
          cargo clippy -- -D warnings -D clippy::all -D clippy::security

      - name: Check for vulnerable dependencies
        run: |
          cd libs/crypto-core
          cargo audit --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: cargo-audit-report
          path: libs/crypto-core/audit-report.json

  test-rust:
    name: Rust Tests
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        rust-version: [stable, nightly]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust ${{ matrix.rust-version }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt, clippy
          override: true

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            libs/crypto-core/target
          key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: |
          cd libs/crypto-core
          cargo fmt -- --check

      - name: Run unit tests
        run: |
          cd libs/crypto-core
          cargo test --verbose --all-features

      - name: Run property-based tests
        run: |
          cd libs/crypto-core
          cargo test --test property_based --verbose

      - name: Run memory leak tests
        run: |
          cd libs/crypto-core
          cargo test --test memory_leak_tests --verbose

      - name: Run regression tests
        run: |
          cd libs/crypto-core
          cargo test --test regression_tests --verbose

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test-rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview
          override: true

      - name: Install cargo-tarpaulin
        run: cargo install --force cargo-tarpaulin

      - name: Generate code coverage
        run: |
          cd libs/crypto-core
          cargo tarpaulin --verbose --out Xml --output-dir coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: libs/crypto-core/coverage/cobertura.xml
          flags: crypto-core
          name: crypto-core-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  fuzz-testing:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    needs: test-rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install cargo-fuzz
        run: cargo install --force cargo-fuzz

      - name: Run fuzz tests
        run: |
          cd libs/crypto-core
          npm run test:fuzz:all
        timeout-minutes: 5

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: [test-rust, security-scan]
    strategy:
      matrix:
        target: [bundler, web, nodejs]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'libs/crypto-core/package.json'

      - name: Cache wasm-pack
        uses: actions/cache@v4
        with:
          path: ${{ env.WASM_PACK_CACHE }}
          key: ${{ runner.os }}-wasm-pack-${{ hashFiles('**/Cargo.lock') }}

      - name: Install wasm-pack
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install dependencies
        run: |
          cd libs/crypto-core
          npm install

      - name: Build WASM (${{ matrix.target }})
        run: |
          cd libs/crypto-core
          case "${{ matrix.target }}" in
            "bundler") npm run build:release:bundler ;;
            "web") npm run build:release:web ;;
            "nodejs") npm run build:release:nodejs ;;
          esac

      - name: Validate build
        run: |
          cd libs/crypto-core
          npm run validate:build

      - name: Check bundle size
        run: |
          cd libs/crypto-core
          npm run size:check

      - name: Generate integrity hashes
        run: |
          cd libs/crypto-core
          npm run integrity:check

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build-${{ matrix.target }}
          path: |
            libs/crypto-core/pkg*
            libs/crypto-core/build-report.json
            libs/crypto-core/bundle-size-report.json
            libs/crypto-core/integrity-manifest.json

  cross-platform-test:
    name: Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    needs: build-wasm
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'libs/crypto-core/package.json'

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build-bundler
          path: libs/crypto-core/

      - name: Install dependencies
        run: |
          cd libs/crypto-core
          npm install

      - name: Run cross-platform tests
        run: |
          cd libs/crypto-core
          npm run test:cross-platform

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build-wasm
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build-bundler
          path: libs/crypto-core/

      - name: Run benchmarks
        run: |
          cd libs/crypto-core
          npm run test:benchmark

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: libs/crypto-core/target/criterion

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [build-wasm, code-coverage, fuzz-testing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'libs/crypto-core/package.json'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Install dependencies
        run: |
          cd libs/crypto-core
          npm install

      - name: Run security audit
        run: |
          cd libs/crypto-core
          npm run audit:prepare

      - name: Upload security audit
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: |
            libs/crypto-core/docs/security-audit-*.md
            libs/crypto-core/docs/security-audit-report.html
            libs/crypto-core/security-audit-*.json

  publish-dry-run:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    needs: [cross-platform-test, benchmark, security-audit]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build-bundler
          path: libs/crypto-core/

      - name: Install dependencies
        run: |
          cd libs/crypto-core
          npm install

      - name: Prepare package
        run: |
          cd libs/crypto-core
          npm run prepare:npm

      - name: Dry run publish
        run: |
          cd libs/crypto-core
          npm publish --dry-run

      - name: Pack for inspection
        run: |
          cd libs/crypto-core
          npm pack

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-dry-run
          path: libs/crypto-core/*.tgz

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [cross-platform-test, benchmark, security-audit]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download WASM artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm-build-bundler
          path: libs/crypto-core/

      - name: Download security audit
        uses: actions/download-artifact@v4
        with:
          name: security-audit-report
          path: libs/crypto-core/

      - name: Install dependencies
        run: |
          cd libs/crypto-core
          npm install

      - name: Prepare package
        run: |
          cd libs/crypto-core
          npm run prepare:npm

      - name: Publish to NPM
        run: |
          cd libs/crypto-core
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release artifacts
        run: |
          cd libs/crypto-core
          tar -czf crypto-core-release-${{ github.ref_name }}.tar.gz \
            pkg/ pkg-web/ pkg-node/ docs/ README.md LICENSE

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: libs/crypto-core/crypto-core-release-${{ github.ref_name }}.tar.gz
          body: |
            ## Crypto Core Release ${{ github.ref_name }}

            Secure Rust/WASM cryptographic core with TypeScript integration.

            ### Security Validation
            - ✅ All security tests passed
            - ✅ Code coverage >95%
            - ✅ Fuzz testing completed
            - ✅ Cross-platform compatibility verified

            ### Package Contents
            - WASM modules for bundler, web, and Node.js
            - TypeScript definitions
            - Security audit reports
            - Performance benchmarks

            ### Installation
            ```bash
            npm install @aura/crypto-core@${{ github.ref_name }}
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [publish-dry-run, publish]
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            wasm-build-*
            cargo-audit-report
            benchmark-results
            npm-package-dry-run
          failOnError: false
